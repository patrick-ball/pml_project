col=2, lty=1, lwd=1)
hist(means[1:1000], prob=TRUE,
main = "First 1000 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(1000)), add=TRUE,
col=2, lty=1, lwd=1)
var(means[1:10])
var(means[1:100])
var(means[1:1000])
par(mfrow = c(1,3))
hist(means[1:10], prob=TRUE,
main = "First 10 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=1)
hist(means[1:100], prob=TRUE,
main = "First 100 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=1)
hist(means[1:1000], prob=TRUE,
main = "First 1000 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=1)
hist(means, prob=TRUE,
main = "Histogram of Means vs Normal Distribution",
xlab = "Sample Means",
border = 4)
abline(v=mean(means),
col=4, lty=2, lwd=2)
curve(dnorm(x, mean = 5, sd=5/sqrt(40)), add=TRUE,  ##fix sd
col=2, lty=1, lwd=2)
abline(v=5,
col=2, lty=2, lwd=2)
legend("topright",
legend = c("Sample Means", "Mean of Sample Means", "Normal Distribution", "Mean of Normal Distribution"),
col = c(4,2),
lwd=1,
scale = 0.5)
par(mfrow=c(1,1))
hist(means, prob=TRUE,
main = "Histogram of Means vs Normal Distribution",
xlab = "Sample Means",
border = 4)
abline(v=mean(means),
col=4, lty=2, lwd=2)
curve(dnorm(x, mean = 5, sd=5/sqrt(40)), add=TRUE,  ##fix sd
col=2, lty=1, lwd=2)
abline(v=5,
col=2, lty=2, lwd=2)
legend("topright",
legend = c("Samples", "Normal")
col = c("blue", "red"),
lwd = 2)
legend("topright",
legend = c("Samples", "Normal"),
col = c("blue", "red"),
lwd = 2)
legend = c("Samples", "Normal Dist"),
legend("topright",
legend = c("Samples", "Normal Dist"),
col = c("blue", "red"),
lwd = 2)
25/40
n <- c(10, 100, 1000)
svar <- c(var(means[1:10]), var(means[1:100]), var(means[1:1000]))
delta <- 0.625 - svar
rbind(n, svar, delta)
options(digits=4)
n <- c(10, 100, 1000)
svar <- c(var(means[1:10]), var(means[1:100]), var(means[1:1000]))
delta <- 0.625 - svar
rbind(n, svar, delta)
options(digits=3)
rbind(n, svar, delta)
options(digits=3)
rbind(n, svar, delta)
n <- c(10, 100, 1000)
svar <- c(var(means[1:10]), var(means[1:100]), var(means[1:1000]))
delta <- 0.625 - svar
rbind(n, svar, delta)
svar <- NULL
for (i in 1:1000) {
svar <- c(svar, var(means[1:i]))
}
plot(xbar, col="blue", pch=19,
main = "Cummulative Mean as Samples Size gets Large",
xlab = "Sample Size",
ylab = "Cummulative Sample Mean")
abline(h=5, col="red", lwd=2)
legend("bottomright",
legend = c("Sample Variance", "Theoretical Variance"),
col = c("blue", "red"),
lwd = 2)
svar <- NULL
for (i in 1:1000) {
svar <- c(svar, var(means[1:i]))
}
plot(svar, col="blue", pch=19,
main = "Cummulative Variance as Samples Size gets Large",
xlab = "Sample Size",
ylab = "Cummulative Sample Variance")
abline(h=0.625, col="red", lwd=2)
legend("bottomright",
legend = c("Sample Variance", "Theoretical Variance"),
col = c("blue", "red"),
lwd = 2)
par(mfrow = c(1,3))
hist(means[1:10], prob=TRUE,
main = "First 10 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
hist(means[1:100], prob=TRUE,
main = "First 100 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
hist(means[1:1000], prob=TRUE,
main = "First 1000 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
Lastly, this plot demonstrates how the histogram closely matches the expected Normal distribution of sample means:
par(mfrow = c(1,3))
hist(means[1:10], prob=TRUE,
main = "First 10 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
hist(means[1:100], prob=TRUE,
main = "First 100 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
hist(means[1:1000], prob=TRUE,
main = "First 1000 Means",
ylab = "", xlab = "")
curve(dnorm(x, mean = 5, sd = 5/sqrt(40)), add=TRUE,
col=2, lty=1, lwd=2)
par(mar = c(2,2,2,2))
hist(samples, prob = TRUE,
main = "Histogram of Values with Actual Distribution",
xlab = "Sample Values",
border=4)
abline(v=mean(samples),
col=4, lty=2, lwd=2)
curve(dexp(x, rate=0.2), add = TRUE,
col=2, lty=1, lwd=2)
abline(v=5,
col=2, lty=2, lwd=2)
legend("topright",
legend=c("Data Samples", "Sample Mean",
"Theoretical Distribution", "Theoretical Mean"),
col = c(4,4,2,2),
lty = c(1,2,1,2),
lwd = c(1,2,1,2))
set.seed(4321)
samples <- rexp(40, rate=0.2)
mean(samples)
par(mfrow = c(1,1))
par(mar = c(2,2,2,2))
hist(samples, prob = TRUE,
main = "Histogram of Values with Actual Distribution",
xlab = "Sample Values",
border=4)
abline(v=mean(samples),
col=4, lty=2, lwd=2)
curve(dexp(x, rate=0.2), add = TRUE,
col=2, lty=1, lwd=2)
abline(v=5,
col=2, lty=2, lwd=2)
legend("topright",
legend=c("Data Samples", "Sample Mean",
"Theoretical Distribution", "Theoretical Mean"),
col = c(4,4,2,2),
lty = c(1,2,1,2),
lwd = c(1,2,1,2))
par(mar = c(3,3,2,2))
hist(samples, prob = TRUE,
main = "Histogram of Values with Actual Distribution",
xlab = "Sample Values",
border=4)
abline(v=mean(samples),
col=4, lty=2, lwd=2)
curve(dexp(x, rate=0.2), add = TRUE,
col=2, lty=1, lwd=2)
abline(v=5,
col=2, lty=2, lwd=2)
legend("topright",
legend=c("Data Samples", "Sample Mean",
"Theoretical Distribution", "Theoretical Mean"),
col = c(4,4,2,2),
lty = c(1,2,1,2),
lwd = c(1,2,1,2))
x <- c(.61, .93, .35, .54, .16, .91, .62, .62)
y <- c(.67, .84, .60, .18, .85, .47, 1.1, .65, .36)
x <- c(.61, .93, .83, .35, .54, .16, .91, .62, .62)
lm(y~x)
model <- lm(y~x)
model
summary(model)
library(data)
library(datasets)
data(mtcars)
names(mtcars)
model2 <- lm(mpg~wt, data=mtcars)
summary(model2)
mean(mtcars$wt)
model2
model2$coeffs
model2$coef
model2$coef[1] + model2$coef[2]*mean(mtcars$wt)
help mtcars
? mtcars
model2$coef[1] + model2$coef[2]*3
model2$coef[2]*2
model2
summary(model2)
model2$res
model2$res*model2$res
sum(model2$res*model2$res)
sum(model2$res*model2$res) -> num
model3 <- lm(mpg~wt*0 + 1)
mean(mtcars$mpg)
lm(mpg, data=mtcars)
mtcars$mpg
lm(mtcars$mpg)
res <- mtcars$mpg - mean(mtcars$mpg)
res
denom <- sum(res*res)
num/denom
x
y
model
model <- lm(y~x)
model
summary(model)
library(swirl)
swirl()
lm(child~parent, galton)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$res, galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(galton$child))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(MASS)
data(shuttle)
?glm
names(shuttle)
str(shuttle)
fit1 <- glm(use ~ wind -1, data=shuttle, family="binomial")
summary(fit1)
head <- fit1$coef[1]
tail <- fit1$coef[2]
exp(tail)/exp(head)
shuttle$use <- factor(shuttle$use, levels = c("auto","noauto"), labels = c(1,0))
fit2 <- glm(use ~ wind -1, data=shuttle, family="binomial")
head <- fit2$coef[1]
tail <- fit2$coef[2]
exp(tail)/exp(head)
fit2 <- glm(use ~ wind + magn - 1, data=shuttle, family="binomial")
tail2 <- fit2$coef[2]
head2 <- fit2$coef[1]
exp(tail2)/exp(head2)
fit1
fit2
fit3 <- glm(1-auto~wind, binomial, shuttle)
fit3 <- glm(1- auto~wind, binomial, shuttle)
fit3 <- glm(1- auto~wind , binomial, shuttle)
fit3 <- glm(1-use~wind , binomial, shuttle)
fit3 <- glm(I(1-use)~wind , binomial, shuttle)
fit3$coef
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit1 <- glm(auto~wind, binomial, shuttle)
fit3 <- glm(1-auto~wind, binomial, shuttle)
fit1
fit1$coef
fit3$coef
library(datasets)
data(InsectSprays)
str(InsectSprays)
m <- glm(count~spray, poisson, Insect)
m <- glm(count~spray, poisson, InsectSprays)
m
1/0.05588
m$coef
1/(1+m$coef[2])
m <- glm(count~spray-1, poisson, InsectSprays)
m$coef
m$coef[1]/m$coef[2]
exp(m$coef[1])/exp(m$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
dim(c(x,y))
dim(x)
x
dim(x)
y
dim(y)
class(x)
class(y)
y[1:5]
length(x)
length(y)
lhs <- function(x) ifelse(x<0,0-x,0)
rhs <- function(x) ifelse(x>0,x-0,0)
gb <- lm(y~lhs(x) + rhs(x))
class(seq(-5,5,by=1))
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
plot(x,y)
lines(x, py)
data(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
f <- glm(auto~wind, binomial, shuttle)
f2 <- glm(1-auto~wind, binomial, shuttle)
fit$coef
f$coef
f2$coef
y <- c(1:10)
y
x <- y-1+rnorm(10)/10
x
z <- c(1:10)
z <- z*2
summary(lm(y~x+offset(z)))
z*4 -> z; summary(lm(y~x+offset(z)))
z+5 -> z; summary(lm(y~x+offset(z)))
z+log(10) -> z; summary(lm(y~x+offset(z)))
log(10)
z<- c(1:10)
summary(glm(count~x+offset(z), family = poisson))
summary(glm(y~x+offset(z), family = poisson))
z <- z+log(10)
summary(glm(y~x+offset(z), family = poisson))
-.34108 - log(10)
install.packages("broom")
install.packages("lubridate")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
class(sampleTimes)
sum(grepl("2012", sampleTimes))
sum(grepl("2012", Weekdays(sampleTimes))
)
Weekdays
sum(grepl("2012", weekdays(sampleTimes)))
sum(grepl("Monday", weekdays(sampleTimes)))
t <- sampleTimes[grep("2012", sampleTimes)]
t
sum(grepl("Monday", weekdays(t)))
install.packages("AppliedPredictiveModeling")
install.packages("carat")
install.packages("caret")
library(caret)
install.packages("brglm")
exit()
quit()
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p=.75)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
head(mixtures)
qplot(CompressiveStrength, data=mixtures, geom="path")
plot(mixtures$CompressiveStrength)
qplot(CompressiveStrength, data=mixtures)
qplot(CompressiveStrength, data=mixtures, geom="path")
qplot(CompressiveStrength, data=mixtures, geom="line")
qplot(CompressiveStrength, data=mixtures)
qplot(y=CompressiveStrength, data=mixtures)
qplot(y=CompressiveStrength, data=mixtures, geom="line")
qplot(y=CompressiveStrength, data=mixtures, geom="path")
qplot(y=CompressiveStrength, data=mixtures, geom=line)
qplot(y=CompressiveStrength, data=mixtures)
qplot(y=CompressiveStrength, data=mixtures, color=age)
str(mixtures)
summary(mixtures)
library(Hmisc)
library(dplyr)
mixtures$FlyAsh
summary(mixtures$FlyAsh)
cut2(mixtures$FlyAsh, g=4)
df <- mixtures
df <- mutate(df, FlyAshGroup = cut2(mixtures$FlyAsh, g=4))
qplot(y=CompressiveStrength, data=mixtures, color=FlyAshGroup)
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=4))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=2))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=3))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=4))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=3))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=2))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=4))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
df <- mutate(df, AgeGroup = cut2(df$Age, g=5))
qplot(y=CompressiveStrength, data=df, color=AgeGroup)
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
df <- mutate(df, FlyAshGroup = cut2(df$FlyAsh, g=2))
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
df <- mutate(df, FlyAshGroup = cut2(df$FlyAsh, g=4))
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
df <- mutate(df, FlyAshGroup = cut2(df$FlyAsh, g=5))
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
df <- mutate(df, FlyAshGroup = cut2(df$FlyAsh, g=2))
qplot(y=CompressiveStrength, data=df, color=FlyAshGroup)
hist(mixtures$SuperPlasticizer)
str(mixtures)
hist(mixtures$Superplasticizer)
boxplot(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist(log(mixtures$Superplasticizer+1))
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=.75)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain]
testing <- adData[-inTrain,]
training <- adData[-inTrain,]
testing <- adData[-inTrain,]
training <- adData[inTrain,]
str(training)
names(training)
trainingSub <- select(training, 1+58:69)
names(trainingSub)
trainingSub <- select(training, 1, 58:69)
names(trainingSub)
trainingSub <- select(training, 58:69)
prComp <- prcomp(trainingSub)
prComp$rotation
prComp
prcomp(trainingSub)
names(prComp)
sum(prComp$sdev)
sum(prComp$sdev^2)
sum(prComp$dev[1:7]^2)/sum(prComp$sdev^2)
sum(prComp$dev[1:7]^2)
sum(prComp$dev^2)
sum(prComp$sdev[1:7]^2)/sum(prComp$sdev^2)
sum(prComp$sdev[1:9]^2)/sum(prComp$sdev^2)
sum(prComp$sdev[1:7]^2)/sum(prComp$sdev^2)
sum(prComp$sdev[1:5]^2)/sum(prComp$sdev^2)
sum(prComp$sdev[1:2]^2)/sum(prComp$sdev^2)
sum(prComp$sdev[1:7])/sum(prComp$sdev)
trainingSub
names(trainingSub)
trainingSub <- select(training, 1, 58:69)
names(trainingSub)
preProc <- preProcess(trainingSub[-1], method="pca", pcaComp=7)
str(preProc)
preProc
predict(preProc, trainingSub[-1])
head(predict(preProc, trainingSub[-1]))
trainPC <- predict(preProc, training[-1])
modelFit <- train(trainingSub$diagnosis ~ ., method="glm", preProcess="pca", data=training)
library(e1071)
install.packages("domc")
library(rattle)
install.packages('rattle')
library(rattle)
str(party)
library(caret)
str(party)
party
install.packages(party)
install.packages('party')
install.packages('rpart')
install.packages('ElemStatLearn')
library(rattle)
install.packages('rattle')
install.packages("rattle")
install.packages('pgmm')
library(ElemStatLearn)
library(dplyr); library(ggplot2); library(caret)
if (getwd() != "C:/Users/Patrick/Coursera/pml_project") {
setwd("C:/Users/Patrick/Coursera/pml_project")
}
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train <- select(train, -(X:num_window))
test <- select(test, -(X:num_window))
train <- train[,colSums(is.na(train))==0]
test <- test[,colSums(is.na(train))==0]
rPartModel <- train(classe~., method="rpart", data=train)
